##  Some imports
## Standard Import
import os, sys

## For scaling and retreiving data about the PDF
from pyPdf import PdfFileWriter, PdfFileReader

## For converting the scaled PDF to an image
from wand.image import Image                    
import ctypes

## For converting the images to strings
import tesseract                                
import cv2.cv as cv

## For letting user select file paths
import Tkinter, tkFileDialog

## Import the extraction stuff
import extraction
dest_file_extraction="test.csv"

#Get a filename
def getPdfPath():
    origDir=os.getcwd()
    #testDir="C:\Users\James McGlynn\My Programs\Python Programs\pdf2txt\WorkRelated\Castle"
    #os.chdir(testDir)
    root=Tkinter.Tk()                           ##  Explicitly call the root window so that you can...
    root.withdraw()                             ##  withdraw it!
    filePath=tkFileDialog.askopenfilename()     ##  imageFile will store the filename of the image you choose   
    root.destroy()                              ##  Some overkill
    os.chdir(origDir)
    return filePath

##  Takes a pdf path as an argument and returns the number of pages in that pdf
def getNumPages(inputFile):
    input1=PdfFileReader(file(inputFile,"rb"))
    num_pages=input1.getNumPages()
    return num_pages

##  Takes a pdf, the page to scale and a zoom factor to scale by and
##  returns the path to a new pdf document that is scaled by the scale factor
def scalePDF(inputFile,pageNumber,zoomFactor):
    print "SCALING  PDF   TO  INCREASE"
    print "IMAGE QUALITY FOR TESSERACT"
    print "---------------------------------------------------"
    #Proper indexing
    pageNumber=pageNumber-1
    #Generate output filename
    outputFile=inputFile[:inputFile.rindex('.')]+'_'+str(pageNumber+1)+'.pdf'
    output=PdfFileWriter()
    input1=PdfFileReader(file(inputFile,"rb"))
    page = input1.getPage(pageNumber)
    # I ran into some trouble with scaling a certain page, I
    # still can't figure out what it was. So I use try here.
    try:
        page.scaleBy(zoomFactor)
    except:
        print "PAGE WAS NOT SCALED: "+str(pageNumber+1)
        print "---------------------------------------------------"
    #Add page to output
    output.addPage(page)
    #Print just the file name
    print "SAVING   SCALED    PDF   AS: "+outputFile[outputFile.rindex('/')+1:]
    print "---------------------------------------------------"
    outputStream = file(outputFile, "wb")
    output.write(outputStream)
    outputStream.close()
    return outputFile

##  Takes a path to a (scaled) pdf and saves it as an image.
##  Then it returns the image path
def pdf2img(pdf_path):
    print "CONVERTING PDF TO AN IMAGE: "+pdf_path[pdf_path.rindex('/')+1:]
    print "---------------------------------------------------"
    img = Image(filename=pdf_path)
    imgname=pdf_path[:pdf_path.rindex('.')]+ext
    print "SAVING THE  IMAGE WITH NAME: "+imgname[imgname.rindex('/')+1:]
    print "---------------------------------------------------"
    img.save(filename=imgname)
    return imgname

##  Takes the image path and uses tess to return a string
##  Currently it takes the string and splits it into a list
##  --------------This may need to change!-------------####
def img2txt(image_path):
    print "CONVERTING IMAGE TO TEXT"
    image=cv.LoadImage(image_path, cv.CV_LOAD_IMAGE_GRAYSCALE)
    tesseract.SetCvImage(image,api)
    text=api.GetUTF8Text()
    word_list_inter=text#.split()
    return word_list_inter

## Takes the word list generated by tess, the target pdf (Just for filename generation)
## And i? I don't know why i gets passed, it gets reassigned anyway, I'll take it out later
def printOutput(word_list,target_pdf,i):
    outputFile=target_pdf[:target_pdf.rindex('.')]+'_text_output_zoom4.txt'
    filehandle=file(outputFile,'a')
    filehandle.write("TEXT FOR PAGE "+str(i))
    filehandle.write("\n")
    for i in range(len(word_list)):
        filehandle.write(word_list[i])
        filehandle.write(" ")
    filehandle.write('\n')
    return outputFile

def printOutput1(word_list,target_pdf,i):
    outputFile=target_pdf[:target_pdf.rindex('.')]+'_text_output_zoom4.txt'
    filehandle=file(outputFile,'a')
    filehandle.write("TEXT FOR PAGE "+str(i))
    filehandle.write("\n")
    filehandle.write(word_list)
    filehandle.write('\n')
    return outputFile

##----THE ACTUAL PROGRAM----##

## Ask user for the target pdf, in the future I plan to have it
## be able to get all the pdfs in a directory!
target_pdf = getPdfPath()
print target_pdf
print "---------------------------------------------------"
print "THE TARGET PDF FILENAME IS: "+target_pdf[target_pdf.rindex('/')+1:]
print "---------------------------------------------------"

##  Initializations for Tess
print "Importing Tess"
api = tesseract.TessBaseAPI()   
api.SetOutputName("outputName");
api.Init(".","eng",tesseract.OEM_DEFAULT)
api.SetPageSegMode(tesseract.PSM_AUTO)

## Other Initializations 
page_num = 1        #Initial Page Number
scale_factor = 4    #Each page of each PDF gets magnified by this
ext='.png'          #Desired Image Extension

## Get num of pages in pdf
num_pages=getNumPages(target_pdf)
print "NUMBER OF PAGES IN PDFFILE: "+str(num_pages)
print "---------------------------------------------------"

##  Some empty lists for storing the data from multiple pages
scaled_pdf, converted_image, word_list=[],[],[]

for i in range(num_pages):

    #Get data for each page
    scaled_pdf_inter=scalePDF(target_pdf,i+1,scale_factor)
    converted_image_inter=pdf2img(scaled_pdf_inter)
    word_list_inter=img2txt(converted_image_inter)
    raw_text_list=extraction.raw_extract("raw_Castle_Lib",word_list_inter)
    extraction.csv_printer(raw_text_list,dest_file_extraction)

    #Gather data from every page
    scaled_pdf.append(scaled_pdf_inter)
    converted_image.append(converted_image_inter)
    word_list.append(word_list_inter)

    print "---------------------------------------------------"
    print "WRITING EXTRACTED TEXT TO FILE"
    printOutput1(word_list[i],target_pdf,i)


##-----UNUSED FUNCTIONS (ALTERNATE WAYS TO USE TESS)--------##
##def img2text_method1(image):
##    api = tesseract.TessBaseAPI()
##    api.Init(".","eng",tesseract.OEM_DEFAULT)
##    api.SetVariable("tessedit_char_whitelist", "0123456789abcdefghijklmnopqrstuvwxyz")
##    api.SetPageSegMode(tesseract.PSM_AUTO)
##    
##    mImgFile = image
##    mBuffer=open(mImgFile,"rb").read()
##    text = tesseract.ProcessPagesBuffer(mBuffer,len(mBuffer),api)
##    word_list=text.split()
##    return word_list
##
##def img2text_method3(image):
##    api = tesseract.TessBaseAPI()
##    api.SetOutputName("outputName");
##    api.Init(".","eng",tesseract.OEM_DEFAULT)
##    api.SetPageSegMode(tesseract.PSM_AUTO)
##    mImgFile = image
##
##    text = tesseract.ProcessPagesWrapper(mImgFile,api)
##    word_list=text.split()
##    return word_list
##
##def img2text_method4(image):
##    api = tesseract.TessBaseAPI()
##    api.SetOutputName("outputName");
##    api.Init(".","eng",tesseract.OEM_DEFAULT)
##    api.SetPageSegMode(tesseract.PSM_AUTO)
##    mImgFile = image
##
##    text = tesseract.ProcessPagesFileStream(mImgFile,api)
##    word_list=text.split()
##    return word_list
##
##def img2text_method5(image):
##    api = tesseract.TessBaseAPI()
##    api.SetOutputName("outputName");
##    api.Init(".","eng",tesseract.OEM_DEFAULT)
##    api.SetPageSegMode(tesseract.PSM_AUTO)
##    mImgFile = image
##
##    text = tesseract.ProcessPagesRaw(mImgFile,api)
##    word_list=text.split()
##    return word_list
##    
##def img2text_method6(image):
##    api = tesseract.TessBaseAPI()
##    api.SetOutputName("outputName");
##    api.Init(".","eng",tesseract.OEM_DEFAULT)
##    api.SetPageSegMode(tesseract.PSM_AUTO)
##    mImgFile = image
##
##    f=open(mImgFile,"rb")
##    mBuffer=f.read()
##    f.close()
##    text = tesseract.ProcessPagesBuffer(mBuffer,len(mBuffer),api)
##    mBuffer=None
##    word_list=text.split()
##    return word_list
